# Required Packages
library(readr)
library(ggplot2)

# Load in separate GPS exports in CSV form
NameofTeam1 <- read_csv("~/Google Drive/whatever you called the folder.csv")
NameofTeam2 <- read_csv("~/Google Drive/whatever you called the folder.csv")
NameofTeam3 <- read_csv("~/Google Drive/whatever you called the folder.csv")
NameofTeam4 <- read_csv("~/Google Drive/whatever you called the folder.csv")
NameofTeam5 <- read_csv("~/Google Drive/whatever you called the folder.csv")
NameofTeam6 <- read_csv("~/Google Drive/whatever you called the folder.csv")

# Use the name of opposition team here instead of "NameofTeam1" etc.,
# Adding this column to the dataframe makes it easier to label opposition teams in the graph later on
NameofTeam1$Oppostion <- c("NameofTeam1")
NameofTeam2$Oppostion <- c("NameofTeam2")
NameofTeam3$Oppostion <- c("NameofTeam3")
NameofTeam4$Oppostion <- c("NameofTeam4")
NameofTeam5$Oppostion <- c("NameofTeam5")
NameofTeam6$Oppostion <- c("NameofTeam6")

# Compile it all into 1 dataframe
League <- rbind(NameofTeam1, NameofTeam2)
League <- rbind(League, NameofTeam3)
League <- rbind(League, NameofTeam4)
League <- rbind(League, NameofTeam5)
League <- rbind(League, NameofTeam6)

# Set the opposition so they appear in chronological order of when opposition teams were played

League$Opposition2 <- factor(League$`Opposition`, c("NameofTeam1", "NameofTeam2", "NameofTeam3", "NameofTeam4", "NameofTeam5", "NameofTeam6"))


# Calculate Top Speed
summary(League$`Top Speed (m/s)`)

# Round to 1 decimal place. Stops having a load of numbers in later graphs
League$`Top Speed (m/s)` <- round(League$`Top Speed (m/s)` ,1)

# Calculate Average Top Speed
League$averagespeed <- ave(League$`Top Speed (m/s)`, League$`Player Name`, FUN = mean)

# Calculate Standard Deviation of Top Speed (Feel free to leave this out)
League$SDspeed <- ave(League$`Top Speed (m/s)`, League$`Player Name`, FUN = sd)

League$`Split Name` <- factor(League$`Split Name`, c("1st.half", "2nd.half", "game", "all"))

# Plot with individual top speed per game and average top speed as a red dot
Plot_A <- ggplot(data=League, aes(`Player Name`, `Top Speed (m/s)`, fill=averagespeed)) + geom_bar(aes(group=`Opposition2`), stat="identity", position="dodge") + geom_point(aes(`Player Name`, averagespeed), size = 2, colour = "red") + facet_wrap(~`Opposition2`, scale = "free") + coord_flip()

Plot_A

# Same plot as above but with standard eviation and errorbars
Plot_B <- ggplot(data=League, aes(`Player Name`, `Top Speed (m/s)`, fill=averagespeed)) + geom_bar(stat="identity") + geom_point(aes(`Player Name`, averagespeed), size = 2, colour = "red") + facet_wrap(~`Session Title`, scale = "free_y") + coord_flip() + geom_errorbar(aes(`Player Name`, averagespeed, ymin = averagespeed-SDspeed*0.5, ymax = averagespeed+SDspeed*0.5))

Plot_B

# Same as original plot but with labels (Recommended best one)
Plot_A + geom_text(data=subset(League, `Split Name` == "game"), aes(group=Opposition2, label=`Top Speed (m/s)`), colour="black", size=4.5) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())




# Distance
# Round distance covered to one decimal place
League$`Distance (km)` <- round(League$`Distance (km)` ,1)

# Calculate average distance for each player
League$averagedistance <- ave(League$`Distance (km)`, League$`Player Name`, FUN = mean)

# Extract data only from game data
League$`Split Name` <- factor(League$`Split Name`, c("game"))

# Create plot
distance <- ggplot(data=League, aes(`Player Name`, `Distance (km)`)) + geom_bar(aes(group=Opposition2), fill="dodgerblue", stat="identity", position="dodge") + facet_wrap(~Opposition2, scale = "free") + coord_flip()

# Add labels
distance + geom_text(data=subset(League, `Split Name` == "game"), aes(group=Opposition2, label=`Distance (km)`), colour="black", size=4.5) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())





# Meters per Minute
# Round meters per minute (gamespeed) to one decimal place
League$`Distance Per Min (m/min)` <- round(League$`Distance Per Min (m/min)` ,1)

# Calculate average game speed
League$averagegamespeed <- ave(League$`Distance Per Min (m/min)`, League$`Player Name`, FUN = mean)

# Extract data only from game data
League$`Split Name` <- factor(League$`Split Name`, c("game"))

# Create plot
gamespeed <- ggplot(data=League, aes(`Player Name`, `Distance Per Min (m/min)`)) + geom_bar(aes(group=Opposition2), fill="dodgerblue", stat="identity", position="dodge") + facet_wrap(~Opposition2, scale = "free") + coord_flip()

# Add labels
gamespeed + geom_text(data=subset(League, `Split Name` == "game"), aes(group=Opposition2, label=`Distance Per Min (m/min)`), colour="black", size=4.5) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())









# High Speed Running Distance 
# (referred to as "Sprint Distance" by playertek website and exports)

# Round high speed running distance to one decimal place
League$`Sprint Distance (m)` <- round(League$`Sprint Distance (m)` ,1)

# Calculate average high speed running distance
League$averagesprintdistance <- ave(League$`Sprint Distance (m)`, League$`Player Name`, FUN = mean)

# Extract data only from game data
League$`Split Name` <- factor(League$`Split Name`, c("game"))

# Create plot
HighSpeedRunning <- ggplot(data=League, aes(`Player Name`, `Sprint Distance (m)`)) + geom_bar(aes(group=Opposition2), fill="dodgerblue", stat="identity", position="dodge") + facet_wrap(~Opposition2, scale = "free") + coord_flip()

# Add labels
HighSpeedRunning + geom_text(data=subset(League, `Split Name` == "game"), aes(group=Opposition2, label=`Sprint Distance (m)`), colour="black", size=4.5) + theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())

